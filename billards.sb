windowWidth = 800
windowHeight = 600

GraphicsWindow.Width = windowWidth
GraphicsWindow.Height = windowHeight

GraphicsWindow.Left = (Desktop.Width - windowWidth) / 2
GraphicsWindow.Top = (Desktop.Height - windowHeight) / 2

GraphicsWindow.Title = "Billiards"
GraphicsWindow.BackgroundColor = "LightBlue"

tableWidth = 500
tableHeight = 250
tableFoamPadding = 15
tableWoodPadding = 30
tableHoleRadius = 15

tableX = windowWidth / 2 - tableWidth / 2
tableY = windowHeight / 2 - tableHeight / 2

Sub DrawTable
  GraphicsWindow.BrushColor = "LightGreen"
  GraphicsWindow.FillRectangle(tableX, tableY, tableWidth, tableHeight)
EndSub

Sub DrawFoam
  GraphicsWindow.BrushColor = "Green"
  ' Top foam
  GraphicsWindow.FillRectangle(tableX, tableY - tableFoamPadding, tableWidth, tableFoamPadding)
  ' Bottom foam
  GraphicsWindow.FillRectangle(tableX, tableY + tableHeight, tableWidth, tableFoamPadding)
  ' Left foam
  GraphicsWindow.FillRectangle(tableX - tableFoamPadding, tableY, tableFoamPadding, tableHeight)
  ' Right foam
  GraphicsWindow.FillRectangle(tableX + tableWidth, tableY, tableFoamPadding, tableHeight)
EndSub

Sub DrawHoles
  GraphicsWindow.BrushColor = "Black"
  ' Top left
  GraphicsWindow.FillEllipse(tableX - tableHoleRadius, tableY - tableHoleRadius, tableHoleRadius*2, tableHoleRadius*2)
  ' Bottom left
  GraphicsWindow.FillEllipse(tableX - tableHoleRadius, tableY + tableHeight - tableHoleRadius, tableHoleRadius*2, tableHoleRadius*2)
  ' Top Right
  GraphicsWindow.FillEllipse(tableX + tableWidth - tableHoleRadius, tableY - tableHoleRadius, tableHoleRadius*2, tableHoleRadius*2)
  ' Bottom Right
  GraphicsWindow.FillEllipse(tableX + tableWidth - tableHoleRadius, tableY + tableHeight - tableHoleRadius, tableHoleRadius*2, tableHoleRadius*2)
  
  ' Center top
  GraphicsWindow.FillEllipse(tableX + tableWidth / 2 - tableHoleRadius, tableY - tableHoleRadius, tableHoleRadius*2, tableHoleRadius*2)
  ' Center bottom
  GraphicsWindow.FillEllipse(tableX + tableWidth / 2 - tableHoleRadius, tableY + tableHeight - tableHoleRadius, tableHoleRadius*2, tableHoleRadius*2)
EndSub

Sub Draw
  DrawTable()
  DrawFoam()
  DrawHoles()
EndSub

Sub MoveBall
  ' Collision!
  If ballX - ballRadius < tableX Then
    ballAngle = Math.Pi - ballAngle
  ElseIf ballX + ballRadius > tableX + tableWidth Then
    ballAngle = Math.Pi - ballAngle
  EndIf
  
  If ballY - ballRadius < tableY Then
    ballAngle = 2*Math.Pi - ballAngle
  ElseIf ballY + ballRadius > tableY + tableHeight Then
    ballAngle = 2*Math.Pi - ballAngle
  EndIf
  
  If ballVelocity > 0 Then
    ballX = ballX + ballVelocity * Math.Cos(ballAngle)
    ballY = ballY + ballVelocity * Math.Sin(ballAngle)
    
    ballVelocity = ballVelocity - tableFriction * ballVelocity
  EndIf
  
  If ballVelocity < 0.05 Then
    ballVelocity = 0
  EndIf
  
  Shapes.Move(ball, ballX - ballRadius, ballY - ballRadius)
EndSub

' Initialize ball
ballRadius = 10
GraphicsWindow.BrushColor = "White"
GraphicsWindow.PenWidth = 1
ball = Shapes.AddEllipse(ballRadius*2, ballRadius*2)
Shapes.ShowShape(ball)

ballX = tableX + 0.75 * tableWidth
ballY = tableY + 0.5 * tableHeight
Shapes.Move(ball, ballX - ballRadius, ballY - ballRadius)

ballVelocity = 0
ballAngle = -120 * Math.Pi / 180
tableFriction = 0.01

Draw()

cueWidth = 7
cueHandleLength = 80
cueBodyLength = 70
cueTipLength = 4
cueDistance = 20

GraphicsWindow.PenWidth = 0
GraphicsWindow.BrushColor = "DarkGoldenrod"
cueHandle = Shapes.AddRectangle(cueHandleLength, cueWidth)
GraphicsWindow.BrushColor = "White"
cueBody = Shapes.AddRectangle(cueBodyLength, cueWidth)
GraphicsWindow.BrushColor = "Black"
cueTip = Shapes.AddRectangle(cueTipLength, cueWidth)

Shapes.HideShape(cueHandle)
Shapes.HideShape(cueBody)
Shapes.HideShape(cueTip)

Sub ShowCue
  mouseX = GraphicsWindow.MouseX
  mouseY = GraphicsWindow.MouseY
  
  dx = mouseX - ballX
  dy = mouseY - ballY
  
  Stack.PushValue("ATan2", dx)
  Stack.PushValue("ATan2", dy)
  ATan2()
  cueAngle = Stack.PopValue("ATan2")
  
  cueTopLeftX = ballX + cueDistance * Math.Cos(cueAngle)
  cueTopLeftY = ballY + cueDistance * Math.Sin(cueAngle)
  
  ' Center the stick along the orthogonal axis
  cueTopLeftX = cueTopLeftX + (cueWidth / 2) * Math.Sin(cueAngle)
  cueTopLeftY = cueTopLeftY - (cueWidth / 2) * Math.Cos(cueAngle)
  
  ' Now position the three parts
  ' Tip goes right at the topLeft
  Shapes.Move(cueTip, cueTopLeftX, cueTopLeftY)
  Shapes.Rotate(cueTip, cueAngle * 180 / Math.Pi)
  
  ' Body needs to extend out from the tip
  cueBodyX = cueTopLeftX + cueTipLength * Math.Cos(cueAngle)
  cueBodyY = cueTopLeftY + cueTipLength * Math.Sin(cueAngle)
  Shapes.Move(cueBody, cueBodyX, cueBodyY)
  Shapes.Rotate(cueBody, cueAngle * 180 / Math.Pi)
  
  ' Handle extends out from the body
  cueHandleX = cueBodyX + cueBodyLength * Math.Cos(cueAngle)
  cueHandleY = cueBodyY + cueBodyLength * Math.Sin(cueAngle)
  Shapes.Move(cueHandle, cueHandleX, cueHandleY)
  Shapes.Rotate(cueHandle, cueAngle * 180 / Math.Pi)
  
  ' Reveal all three parts
  Shapes.ShowShape(cueTip)
  Shapes.ShowShape(cueBody)
  Shapes.ShowShape(cueHandle)
EndSub

Sub ATan2
  dy = Stack.PopValue("ATan2")
  dx = Stack.PopValue("ATan2")
  
  If dx > 0 Then
    angle = Math.ArcTan(dy / dx)
  ElseIf dx < 0 And dy >= 0 Then
    angle = Math.ArcTan(dy / dx) + Math.Pi
  ElseIf dx < 0 And dy <= 0 Then
    angle = Math.ArcTan(dy / dx) - Math.Pi
  ElseIf dx = 0 And dy > 0 Then
    angle = Math.Pi / 2
  ElseIf dx = 0 and dy < 0 Then
    angle = -Math.Pi / 2
  Else
    angle = 0
  EndIf
  
  Stack.PushValue("ATan2", angle)
EndSub

Sub HideCue
  Shapes.HideShape(cueHandle)
EndSub

While ("True")
  Program.Delay(Math.Round(1000 / 144))
  
  If ballVelocity = 0 Then
    ShowCue()
  Else
    HideCue()
    MoveBall()
  EndIf
EndWhile